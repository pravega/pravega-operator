apiVersion: "pravega.pravega.io/v1beta1"
kind: "PravegaCluster"
metadata:
  name: {{ template "pravega.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "pravega.commonLabels" . | indent 4 }}
spec:
  {{- if .Values.tls }}
  tls:
    static:
      controllerSecret: {{ .Values.tls.secret.controller }}
      segmentStoreSecret: {{ .Values.tls.secret.segmentStore }}
      caBundle: {{ .Values.tls.caBundle }}
  {{- end }}
  authentication:
    enabled: {{ .Values.authentication.enabled }}
    {{- if .Values.authentication.enabled }}
    passwordAuthSecret: {{ .Values.authentication.passwordAuthSecret }}
    {{- end }}
  version: {{ .Values.version }}
  zookeeperUri: {{ .Values.zookeeperUri }}
  bookkeeperUri: {{ .Values.bookkeeperUri }}
  externalAccess:
    enabled: {{ .Values.externalAccess.enabled }}
    {{- if .Values.externalAccess.enabled }}
    type: {{ .Values.externalAccess.type }}
    {{- if .Values.externalAccess.domainName }}
    domainName: {{ .Values.externalAccess.domainName }}
    {{- end }}
    {{- end }}
  pravega:
    {{- if .Values.externalAccess.enabled }}
    controllerServiceAccountName: {{ .Values.serviceAccount.name }}
    segmentStoreServiceAccountName: {{ .Values.serviceAccount.name }}
    {{- if .Values.segmentStore.service.segmentStoreLoadBalancerIP }}
    segmentStoreLoadBalancerIP: {{ .Values.segmentStore.service.segmentStoreLoadBalancerIP  }}
    {{- end }}
    segmentStoreExternalTrafficPolicy:  {{ .Values.segmentStore.service.segmentStoreExternalTrafficPolicy }}
    {{- if .Values.controller.service.type }}
    controllerExtServiceType: {{ .Values.controller.service.type }}
    {{- end }}
    {{- if .Values.controller.service.annotations }}
    controllerSvcAnnotations:
{{ toYaml .Values.controller.service.annotations | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.service.type }}
    segmentStoreExtServiceType: {{ .Values.segmentStore.service.type }}
    {{- end }}
    {{- if .Values.segmentStore.service.annotations }}
    segmentStoreSvcAnnotations:
{{ toYaml .Values.segmentStore.service.annotations | indent 6 }}
    {{- end }}
    {{- end }}
    image:
      repository: {{ .Values.image.repository }}
      pullPolicy: {{ .Values.image.pullPolicy }}
    controllerReplicas: {{ .Values.controller.replicas }}
    {{- if .Values.controller.resources }}
    controllerResources:
{{ toYaml .Values.controller.resources | indent 6 }}
    {{- end }}
    segmentStoreReplicas: {{ .Values.segmentStore.replicas }}
    {{- if .Values.segmentStore.resources }}
    segmentStoreResources:
{{ toYaml .Values.segmentStore.resources | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.env }}
    segmentStoreEnvVars: {{ .Values.segmentStore.env }}
    {{- end }}
    {{- if .Values.segmentStore.secret }}
    segmentStoreSecret:
      {{- if .Values.segmentStore.secret.name }}
      secret: {{ .Values.segmentStore.name }}
      {{- end }}
      {{- if .Values.segmentStore.secret.path }}
      mountPath: {{ .Values.segmentStore.path }}
      {{- end }}
    {{- end }}
    {{- if .Values.controller.jvmOptions }}
    controllerjvmOptions:
{{ toYaml .Values.controller.jvmOptions | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.jvmOptions }}
    segmentStoreJVMOptions:
{{ toYaml .Values.segmentStore.jvmOptions | indent 6 }}
    {{- end }}
    debugLogging: {{ .Values.debugLogging }}
    cacheVolumeClaimTemplate:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.storage.cache.className }}
      resources:
        requests:
          storage: {{ .Values.storage.cache.size }}
    longtermStorage:
      {{- if eq .Values.storage.longtermStorage.type "ecs"}}
      ecs:
        configUri: {{ .Values.storage.longtermStorage.ecs.configUri }}
        bucket: {{ .Values.storage.longtermStorage.ecs.bucket }}
        prefix: {{ .Values.storage.longtermStorage.ecs.prefix }}
        credentials: {{ .Values.storage.longtermStorage.ecs.credentials }}
      {{- else if eq .Values.storage.longtermStorage.type "hdfs"}}
      hdfs:
        uri: {{ .Values.storage.longtermStorage.hdfs.uri }}
        root: {{ .Values.storage.longtermStorage.hdfs.root }}
        replicationFactor: {{ .Values.storage.longtermStorage.hdfs.replicationFactor }}
      {{- else }}
      filesystem:
        persistentVolumeClaim:
          claimName: {{ .Values.storage.longtermStorage.filesystem.pvc }}
      {{- end }}
    {{- if .Values.options }}
    options:
{{ toYaml .Values.options | indent 6 }}
    {{- end }}
